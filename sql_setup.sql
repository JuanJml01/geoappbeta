-- Asegurarse de que las tablas existan con el nombre correcto
-- Si la tabla existe con otro nombre, renombrarla

-- Verificar si existe la tabla 'reporte' (en minúsculas) y renombrarla si es necesario
DO $$
BEGIN
    IF EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'reporte') THEN
        ALTER TABLE public.reporte RENAME TO "Reportes";
        RAISE NOTICE 'Tabla renombrada de reporte a Reportes';
    END IF;
END
$$;

-- Asegurarse de que la tabla Reportes exista
CREATE TABLE IF NOT EXISTS public."Reportes" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email TEXT,
    latitud DOUBLE PRECISION,
    longitud DOUBLE PRECISION,
    imagen TEXT,
    descripcion VARCHAR,
    tipo TEXT,
    estado TEXT DEFAULT 'pendiente',
    tipo_tags TEXT,
    ubicacion_tags TEXT,
    user_id UUID REFERENCES auth.users(id) NULL, -- Hacemos nullable para usuarios anónimos
    created_at TIMESTAMPTZ DEFAULT now()
);

-- Asegurarse de que el bucket 'imagenes' exista
INSERT INTO storage.buckets (id, name, public, avif_autodetection, file_size_limit, allowed_mime_types)
SELECT 'imagenes', 'imagenes', true, false, 10485760, ARRAY['image/jpeg', 'image/png', 'image/gif']
WHERE NOT EXISTS (
    SELECT 1 FROM storage.buckets WHERE id = 'imagenes'
);

-- Configurar políticas de seguridad para la tabla Reportes
DROP POLICY IF EXISTS "Permitir acceso público a reportes" ON public."Reportes";
CREATE POLICY "Permitir acceso público a reportes" 
ON public."Reportes" FOR SELECT 
TO authenticated, anon
USING (true);

DROP POLICY IF EXISTS "Permitir insertar reportes a usuarios autenticados" ON public."Reportes";
CREATE POLICY "Permitir insertar reportes a usuarios autenticados" 
ON public."Reportes" FOR INSERT 
TO authenticated
WITH CHECK (true);

DROP POLICY IF EXISTS "Permitir insertar reportes anónimos" ON public."Reportes";
CREATE POLICY "Permitir insertar reportes anónimos" 
ON public."Reportes" FOR INSERT 
TO anon
WITH CHECK (email LIKE '%anonymous%');

DROP POLICY IF EXISTS "Permitir actualizar propios reportes" ON public."Reportes";
CREATE POLICY "Permitir actualizar propios reportes" 
ON public."Reportes" FOR UPDATE 
TO authenticated
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Añadir RLS a la tabla
ALTER TABLE public."Reportes" ENABLE ROW LEVEL SECURITY;

-- Añadir un índice para mejorar las consultas por ubicación
CREATE INDEX IF NOT EXISTS idx_reportes_geo 
ON public."Reportes" (latitud, longitud);

CREATE INDEX IF NOT EXISTS idx_reportes_email 
ON public."Reportes" (email);

-- Agregar funciones para obtener reportes cercanos
CREATE OR REPLACE FUNCTION get_reportes_cercanos(lat DOUBLE PRECISION, lng DOUBLE PRECISION, radio_km DOUBLE PRECISION)
RETURNS SETOF public."Reportes" AS $$
BEGIN
    RETURN QUERY
    SELECT *
    FROM public."Reportes"
    WHERE 
        sqrt(power(69.1 * (latitud - lat), 2) + power(69.1 * (lng - longitud) * cos(lat / 57.3), 2)) < radio_km
    ORDER BY 
        sqrt(power(69.1 * (latitud - lat), 2) + power(69.1 * (lng - longitud) * cos(lat / 57.3), 2));
END;
$$ LANGUAGE plpgsql;

-- NOTA: Las políticas para storage.objects generalmente deben ser configuradas
-- desde la interfaz de Supabase ya que requieren privilegios especiales.
-- Sigue estos pasos en la consola web de Supabase:

/*
1. Ve a Storage en el panel lateral
2. Selecciona el bucket 'imagenes' (o créalo si no existe)
3. Ve a la pestaña 'Policies'
4. Crea las siguientes políticas:

   - Política 'Permitir acceso público a imágenes':
     * Tipo: SELECT
     * Roles: authenticated, anon
     * USING: bucket_id = 'imagenes'

   - Política 'Permitir subir imágenes a usuarios autenticados':
     * Tipo: INSERT
     * Roles: authenticated
     * WITH CHECK: bucket_id = 'imagenes'

   - Política 'Permitir subir imágenes a anónimos':
     * Tipo: INSERT
     * Roles: anon
     * WITH CHECK: bucket_id = 'imagenes' AND (storage.foldername(name))[1] = 'reportes'
*/ 
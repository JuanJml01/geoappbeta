-- SCRIPT DE RECONSTRUCCIÓN COMPLETA DE LA BASE DE DATOS
-- Este script elimina y reconstruye las tablas principales del sistema

-- 1. Eliminación de tablas existentes (en orden inverso por dependencias)
DROP TABLE IF EXISTS public."usuario_logros" CASCADE;
DROP TABLE IF EXISTS public."usuario_zonas" CASCADE;
DROP TABLE IF EXISTS public."Reportes" CASCADE;
DROP TABLE IF EXISTS public."reporte" CASCADE; -- Por si existe la versión en minúsculas
DROP TABLE IF EXISTS public."reporte_calificaciones" CASCADE;
DROP TABLE IF EXISTS public."logros" CASCADE;
DROP TABLE IF EXISTS public."zonas" CASCADE;
DROP TABLE IF EXISTS public."usuarios" CASCADE;

-- 2. Creación de tablas principales

-- Usuarios - Almacena información adicional sobre usuarios autenticados
CREATE TABLE public."usuarios" (
    id UUID PRIMARY KEY REFERENCES auth.users(id),
    nombre TEXT,
    ciudad TEXT,
    bio TEXT,
    foto TEXT,
    nivel INTEGER DEFAULT 1,
    puntos INTEGER DEFAULT 0,
    es_anonimo BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Zonas geográficas
CREATE TABLE public."zonas" (
    id SERIAL PRIMARY KEY,
    nombre TEXT NOT NULL,
    descripcion TEXT,
    latitud DOUBLE PRECISION,
    longitud DOUBLE PRECISION,
    radio_km DOUBLE PRECISION DEFAULT 1.0,
    created_at TIMESTAMPTZ DEFAULT now()
);

-- Logros del sistema
CREATE TABLE public."logros" (
    id SERIAL PRIMARY KEY,
    nombre TEXT NOT NULL,
    descripcion TEXT,
    icono TEXT,
    puntos INTEGER DEFAULT 10,
    condicion TEXT, -- Describe cómo se obtiene (para documentación)
    categoria TEXT, -- Categoría del logro (contribución, comunidad, calidad, etc.)
    nivel_requerido INTEGER DEFAULT 1,
    created_at TIMESTAMPTZ DEFAULT now()
);

-- Reportes ambientales
CREATE TABLE public."Reportes" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email TEXT NOT NULL,
    user_id UUID REFERENCES auth.users(id), -- Puede ser NULL para anónimos
    latitud DOUBLE PRECISION NOT NULL,
    longitud DOUBLE PRECISION NOT NULL,
    imagen TEXT,
    descripcion TEXT,
    tipo TEXT, -- Campo individual (para compatibilidad)
    estado TEXT DEFAULT 'pendiente',
    tipo_tags TEXT, -- Almacena múltiples tags separados por coma
    ubicacion_tags TEXT, -- Almacena múltiples tags separados por coma
    importancia INTEGER DEFAULT 0, -- Nivel de importancia calculado en base a calificaciones
    vistas INTEGER DEFAULT 0, -- Contador de vistas
    prioridad_comunidad BOOLEAN DEFAULT FALSE, -- Flag para problemas priorizados
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Calificaciones de reportes
CREATE TABLE public."reporte_calificaciones" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    reporte_id BIGINT REFERENCES public."Reportes"(id) ON DELETE CASCADE,
    user_id UUID REFERENCES auth.users(id), -- Si es un usuario autenticado
    email TEXT, -- Si es un usuario anónimo
    device_id TEXT, -- Para limitar votos duplicados por dispositivo
    calificacion INTEGER NOT NULL CHECK (calificacion BETWEEN 1 AND 5),
    comentario TEXT,
    created_at TIMESTAMPTZ DEFAULT now()
);

-- Relación usuarios-zonas
CREATE TABLE public."usuario_zonas" (
    id SERIAL PRIMARY KEY,
    usuario_id UUID REFERENCES public."usuarios"(id) ON DELETE CASCADE,
    zona_id INTEGER REFERENCES public."zonas"(id) ON DELETE CASCADE,
    es_favorita BOOLEAN DEFAULT FALSE,
    es_vigilante BOOLEAN DEFAULT FALSE, -- Usuario puede ser "vigilante" de la zona
    created_at TIMESTAMPTZ DEFAULT now()
);

-- Relación usuarios-logros
CREATE TABLE public."usuario_logros" (
    id SERIAL PRIMARY KEY,
    usuario_id UUID REFERENCES public."usuarios"(id) ON DELETE CASCADE,
    logro_id INTEGER REFERENCES public."logros"(id) ON DELETE CASCADE,
    fecha_obtenido TIMESTAMPTZ DEFAULT now()
);

-- 3. Crear índices para mejorar rendimiento
CREATE INDEX IF NOT EXISTS idx_reportes_geo ON public."Reportes" (latitud, longitud);
CREATE INDEX IF NOT EXISTS idx_reportes_email ON public."Reportes" (email);
CREATE INDEX IF NOT EXISTS idx_reportes_usuario ON public."Reportes" (user_id);
CREATE INDEX IF NOT EXISTS idx_reportes_importancia ON public."Reportes" (importancia DESC);
CREATE INDEX IF NOT EXISTS idx_reportes_tags ON public."Reportes" (tipo_tags);
CREATE INDEX IF NOT EXISTS idx_calificaciones_reporte ON public."reporte_calificaciones" (reporte_id);

-- 4. Vistas para simplificar consultas comunes
CREATE OR REPLACE VIEW public."reportes_con_calificaciones" AS
SELECT 
    r.*,
    COUNT(rc.id) AS total_calificaciones,
    COALESCE(AVG(rc.calificacion), 0) AS calificacion_promedio
FROM 
    public."Reportes" r
LEFT JOIN 
    public."reporte_calificaciones" rc ON r.id = rc.reporte_id
GROUP BY 
    r.id;

-- 5. Funciones útiles

-- Función para obtener reportes cercanos a una ubicación
CREATE OR REPLACE FUNCTION public."get_reportes_cercanos"(lat DOUBLE PRECISION, lng DOUBLE PRECISION, radio_km DOUBLE PRECISION)
RETURNS SETOF public."Reportes" AS $$
BEGIN
    RETURN QUERY
    SELECT *
    FROM public."Reportes"
    WHERE 
        sqrt(power(69.1 * (latitud - lat), 2) + power(69.1 * (lng - longitud) * cos(lat / 57.3), 2)) < radio_km
    ORDER BY 
        importancia DESC,
        sqrt(power(69.1 * (latitud - lat), 2) + power(69.1 * (lng - longitud) * cos(lat / 57.3), 2));
END;
$$ LANGUAGE plpgsql;

-- Función para incrementar vistas de un reporte
CREATE OR REPLACE FUNCTION public."incrementar_vistas_reporte"(p_reporte_id BIGINT)
RETURNS VOID AS $$
BEGIN
    UPDATE public."Reportes"
    SET vistas = vistas + 1
    WHERE id = p_reporte_id;
END;
$$ LANGUAGE plpgsql;

-- Función para actualizar la importancia de un reporte basado en calificaciones
CREATE OR REPLACE FUNCTION public."actualizar_importancia_reporte"()
RETURNS TRIGGER AS $$
DECLARE
    promedio DOUBLE PRECISION;
    total INTEGER;
BEGIN
    -- Calcular promedio de calificaciones y total
    SELECT 
        COALESCE(AVG(calificacion), 0),
        COUNT(*)
    INTO 
        promedio,
        total
    FROM 
        public."reporte_calificaciones"
    WHERE 
        reporte_id = NEW.reporte_id;
    
    -- Actualizar importancia (fórmula: promedio * (1 + log(total+1)))
    UPDATE public."Reportes"
    SET importancia = CAST(promedio * (1 + ln(total+1)) AS INTEGER)
    WHERE id = NEW.reporte_id;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para actualizar importancia cuando se añade o modifica una calificación
DROP TRIGGER IF EXISTS trigger_actualizar_importancia ON public."reporte_calificaciones";
CREATE TRIGGER trigger_actualizar_importancia
AFTER INSERT OR UPDATE OR DELETE ON public."reporte_calificaciones"
FOR EACH ROW
EXECUTE FUNCTION public."actualizar_importancia_reporte"();

-- 6. Configurar políticas de seguridad (RLS)

-- Habilitar RLS en todas las tablas
ALTER TABLE public."Reportes" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."reporte_calificaciones" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."usuarios" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."usuario_logros" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."usuario_zonas" ENABLE ROW LEVEL SECURITY;

-- Políticas para Reportes
DROP POLICY IF EXISTS "Permitir acceso público a reportes" ON public."Reportes";
CREATE POLICY "Permitir acceso público a reportes" 
ON public."Reportes" FOR SELECT 
TO authenticated, anon
USING (true);

DROP POLICY IF EXISTS "Permitir insertar reportes a usuarios autenticados" ON public."Reportes";
CREATE POLICY "Permitir insertar reportes a usuarios autenticados" 
ON public."Reportes" FOR INSERT 
TO authenticated
WITH CHECK (user_id = auth.uid() OR user_id IS NULL);

DROP POLICY IF EXISTS "Permitir insertar reportes anónimos" ON public."Reportes";
CREATE POLICY "Permitir insertar reportes anónimos" 
ON public."Reportes" FOR INSERT 
TO anon
WITH CHECK (email LIKE '%anonymous%' AND user_id IS NULL);

DROP POLICY IF EXISTS "Permitir actualizar propios reportes" ON public."Reportes";
CREATE POLICY "Permitir actualizar propios reportes" 
ON public."Reportes" FOR UPDATE 
TO authenticated
USING (user_id = auth.uid())
WITH CHECK (user_id = auth.uid());

-- Políticas para calificaciones
DROP POLICY IF EXISTS "Permitir acceso público a calificaciones" ON public."reporte_calificaciones";
CREATE POLICY "Permitir acceso público a calificaciones" 
ON public."reporte_calificaciones" FOR SELECT 
TO authenticated, anon
USING (true);

DROP POLICY IF EXISTS "Permitir insertar calificaciones a usuarios autenticados" ON public."reporte_calificaciones";
CREATE POLICY "Permitir insertar calificaciones a usuarios autenticados" 
ON public."reporte_calificaciones" FOR INSERT 
TO authenticated
WITH CHECK (user_id = auth.uid());

DROP POLICY IF EXISTS "Permitir insertar calificaciones anónimas" ON public."reporte_calificaciones";
CREATE POLICY "Permitir insertar calificaciones anónimas" 
ON public."reporte_calificaciones" FOR INSERT 
TO anon
WITH CHECK (email LIKE '%anonymous%' AND user_id IS NULL);

-- Políticas para usuarios
DROP POLICY IF EXISTS "Permitir acceso público a perfiles" ON public."usuarios";
CREATE POLICY "Permitir acceso público a perfiles" 
ON public."usuarios" FOR SELECT 
TO authenticated, anon
USING (true);

DROP POLICY IF EXISTS "Permitir editar propio perfil" ON public."usuarios";
CREATE POLICY "Permitir editar propio perfil" 
ON public."usuarios" FOR UPDATE 
TO authenticated
USING (id = auth.uid())
WITH CHECK (id = auth.uid());

-- 7. Datos iniciales

-- Insertar zonas de ejemplo
INSERT INTO public."zonas" (nombre, descripcion, latitud, longitud, radio_km)
VALUES 
    ('Centro', 'Zona céntrica de la ciudad', 40.416775, -3.703790, 2.5),
    ('Parque Norte', 'Área verde al norte de la ciudad', 40.432390, -3.689725, 1.0),
    ('Río Este', 'Ribera este del río principal', 40.405231, -3.673203, 3.0),
    ('Bosque Sur', 'Bosque protegido al sur', 40.389483, -3.691035, 5.0);

-- Insertar logros
INSERT INTO public."logros" (nombre, descripcion, icono, puntos, condicion, categoria, nivel_requerido)
VALUES 
    ('Primer Reporte', 'Realizaste tu primer reporte ambiental', 'eco', 10, 'Crear primer reporte', 'contribución', 1),
    ('Vigilante Ambiental', 'Realiza 5 reportes validados', 'shield', 50, 'Tener 5 reportes con calificación > 3', 'contribución', 1),
    ('Fotógrafo Ecológico', 'Tus fotos son de alta calidad', 'camera', 30, 'Tener 3 reportes con calificación > 4', 'calidad', 2),
    ('Defensor Local', 'Te preocupas por tu comunidad', 'location_city', 25, 'Reportar 3 problemas en la misma zona', 'comunidad', 1),
    ('Experto en Residuos', 'Especialista en reportar problemas de basura', 'delete', 20, 'Reportar 5 problemas de tipo basura', 'especialización', 2),
    ('Ciudadano Comprometido', 'La comunidad valora tus reportes', 'thumb_up', 40, 'Obtener 10 calificaciones positivas', 'comunidad', 3);

-- 8. Crear un trigger para usuarios anónimos
CREATE OR REPLACE FUNCTION public.handle_new_user() 
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public."usuarios" (id, nombre, es_anonimo)
  VALUES (new.id, new.email, new.is_anonymous);
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user(); 